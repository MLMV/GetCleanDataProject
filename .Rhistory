© 2015 GitHub, Inc. Terms Privacy Security Contact Help
source('~/.active-rstudio-document')
## Put comments here that give an overall description of what your
## functions do
## The first function will store the matrix's inverse in cache and make a
## Few other functions available in the global environment
## Get, set, getinv, and setinv are allowed to be called by the second function
## Write a short comment describing this function
## Creates the functions necessary for caching a matrix's inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- solve() m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
## This function checks the cache for the inverted matrix of x.
## If the inverted matrix does not exist it will create it and return it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## The first function will store the matrix's inverse in cache and make a
## Few other functions available in the global environment
## Get, set, getinv, and setinv are allowed to be called by the second function
## Write a short comment describing this function
## Creates the functions necessary for caching a matrix's inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- solve() m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
## This function checks the cache for the inverted matrix of x.
## If the inverted matrix does not exist it will create it and return it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## The first function will store the matrix's inverse in cache and make a
## Few other functions available in the global environment
## Get, set, getinv, and setinv are allowed to be called by the second function
## Write a short comment describing this function
## Creates the functions necessary for caching a matrix's inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- solve() m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
## This function checks the cache for the inverted matrix of x.
## If the inverted matrix does not exist it will create it and return it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
b <- matrix(c(-1, -2, 1, 1), 2,2)
a <- makeCacheMatrix(b)
cacheSolve(a)
source('~/.active-rstudio-document')
## Put comments here that give an overall description of what your
## functions do
## The first function will store the matrix's inverse in cache and make a
## Few other functions available in the global environment
## Get, set, getinv, and setinv are allowed to be called by the second function
## Write a short comment describing this function
## Creates the functions necessary for caching a matrix's inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- solve() m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
## This function checks the cache for the inverted matrix of x.
## If the inverted matrix does not exist it will create it and return it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
source('~/.active-rstudio-document')
b <- matrix(c(-1, -2, 1, 1), 2,2)
a <- makeCacheMatrix(b)
cacheSolve(a)
set.seed(1)
sample(1:10,4)
sample(letters, 5)
?sample
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10, replace = TRUE)
system.time
?system.time
install.packages("dplyr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("ggvis")
install.packages("shiny")
install.packages("slidify")
read.xlsx2()
library(xlsx)
read.xlsx2()
?read.xlsx2
install.packages("jsonlite")
## load various datasets from the datasets package
source('~/R/My Packages/get_data_iris.R')
print (iris)
cat (iris)
install.packages("data.table") # easier than data frames
library(dplyr)
source('~/.active-rstudio-document')
src_mysql(world, host = MYSQL57, port = 3306, user = "Profiler", password = "Profiler",
src_mysql(world, host = MYSQL57, port = 3306, user = "Profiler", password = "Profiler",...)
mydata <- src_mysql(world, host = MYSQL57, port = 3306, user = "Profiler", password = "Profiler",...)
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "sourc")
install.packages("RMySQL", type = "source")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="Maquis", password = "Maquis06My", dbname="rsamples")
source('~/.active-rstudio-document')
library(RMySQL)
MyDB <-
dbConnect(
MySQL(), host = "127.0.0.1", port = 3306, user = "Maquis",
password = "Maquis06My", dbname = "rsamples"
)
ListDB <- dbGetQuery(MyDB, "show databases:"); dbDisconnect(MyDB);
MyDB <-
dbConnect(
MySQL(), host = "127.0.0.1", port = 3306, user = "Maquis",
password = "Maquis06My"
)
MyDB <-
dbConnect(
MySQL(), host = "127.0.0.1", port = 3306, user = "Maquis",
password = "Maquis06My"
)
ListDB <- dbGetQuery(MyDB, "show databases:"); dbDisconnect(MyDB);
ListDB <- dbGetQuery(MyDB, "show databases;"); dbDisconnect(MyDB);
# List database schema
ListDB <- dbGetQuery(MyDB, "show databases;"); dbDisconnect(MyDB);
ListDB
source('~/R/My Scripts/read MySQL.R')
source('~/R/My Scripts/read MySQL.R')
source('~/R/My Scripts/read MySQL.R')
source('~/R/My Scripts/read MySQL.R')
source('~/R/My Scripts/read MySQL.R')
print (MyServerDBList)
MyDBTableList <- dbListTables(MyDB)
print (MyDBTableList)
dbListFields(MyDB, housing)
dbListFields(MyDB, "housing")
dbGetQuery(MyDB, "select count(*) from housing")
dbReadTable(MyDB, "housing")
MyData <- dbReadTable(MyDB, "housing")
head(MyData, 10)
summary (MyData)
str(MyData)
MyQuery <- dbSendQuery(MyDB, "select * from housing where Puma is 00600")
MyQuery <- dbSendQuery(MyDB, "select * from housing where Puma is "00600"")
MyQuery <- dbSendQuery(MyDB, "select * from housing where Puma = "00600"" )
MyQuery <- dbSendQuery(MyDB, "select * from housing where PUMA=00600" )
MyResults <- fetch(MyQuery, n=10)
dbClearResult(MyQuery)
MyQuery <- dbSendQuery(MyDB, "select * from housing where PUMA=00600 or 00800" )
dbDisconnect(MyServer)
dbDisconnect(MyDB)
dbClearResult(MyQuery)
MyDB <-
dbConnect(
MySQL(), host = "127.0.0.1", port = 3306, user = "Maquis",
password = "Maquis06My", dbname = "rsamples"
)
dbClearResult(MyQuery)
MyQuery <- dbSendQuery(MyDB, "select * from housing where PUMA=00600")
MyResults <- fetch(MyQuery)
dbClearResult(MyQuery)
dbDisconnect(MyDB)
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:1),"var3"=sample(11:15))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(X)
View(X)
source('~/.active-rstudio-document', echo=TRUE)
View(X)
View(X)
source('~/.active-rstudio-document', echo=TRUE)
View(X)
View(X)
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
View(X)
View(X)
source('~/.active-rstudio-document', echo=TRUE)
View(X)
View(X)
X
X[,1]
X[1:2,"var2"]
X[(X$var1 <= 3 & X$Var3 > 11),]
View(X)
View(X)
source('~/R/Coursera/3. Getting and Cleaning Data/subsetting lecture.R', echo=TRUE)
# Create a data frame
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),];X$var2[c(1,3)] = NA
X
#      var1 var2 var3
#    1    2   NA   15
#    4    1   10   11
#    2    3   NA   12
#    3    5    6   14
#    5    4    9   13
# Subsetting basics
# subset a specific column number
X[,1]
# [1] 2 1 3 5 4
# subset a column by name
X[,"var1"]
# [1] 2 1 3 5 4
#subset specific rows in a column
X[1:2,"var2"]
# [1] NA 10
# Logicals and ors
# Select rows that meet a given condition
X[(X$var1 <= 3 & X$Var3 > 11),]
# Create a data frame
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),];X$var2[c(1,3)] = NA
X
X[,1]
X[,"var1"]
X[1:2,"var2"]
X[(X$var1 <= 3 & X$Var3 > 11),]
X[(X$var1 <= 3 | X$Var3 > 11),]
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 | X$var3 > 11),]
#      var1 var2 var3
X[(X$var1 <= 3 | X$var3 > 15),]
X[,"var1"]
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),];X$var2[c(1,3)] = NA
X
X[(X$var2 > 8),]
X[(X$var2 > 9),]
X[which(X$var2 > 9),]
sort(X$var1)
sort(X$var1, decreasing = TRUE)
sort(X$var2, na.last = TRUE)
View(X)
View(X)
X$var1 <- sort(X$var1)
View(X)
View(X)
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),
"var3"=sample(11:15))
X <- X[sample(1:5),];X$var2[c(1,3)] = NA
View(X)
View(X)
X[order(X$var1),]
X[order(Xvar1,Xvar3),]
X[order(X$var1,X$var3),]
install.packages("plyr")            # simpler data manipulation
library(plyr)
arrange(X, var1)
arrange(X, desc(var1))
library(plyr)
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),
"var3"=sample(11:15))
X <- X[sample(1:5),];X$var2[c(1,3)] = NA
arrange(X, desc(var1))
X
save.image("~/R/horizontal.RData")
install.packages("reshape2")        # convert wide/long data frames
library(reshape2)
head(mtcars)
melt(mtcars)
mtcars
cars_long <- melt(mtcars)
head(mtcars)
cars_long <- melt(mtcars)
cars_long
head(cars_long)
cars_wide <- dcast(cars_long)
library(reshape2)
mtcars$carname <- rownames(mtcars)
head(mtcars)
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
head(carMelt)
tail(carMelt)
cylData <- dcast(carMelt, cyl ~ variable)
head(cylData)
cylData <- (carMelt, cyl ~ variable, mean)
cylData <- dcast(carMelt, cyl ~ variable, mean)
head(cylData)
cylData <- dcast(carMelt, cyl ~ variable)
head(cylData)
head(carMelt)
View(carMelt)
table(carMelt$cyl %in% c("4"))
View(carMelt)
table(carMelt$cyl %in% c("4" and carMelt$variable == "mpg"))
table(carMelt$cyl %in% c("4") and carMelt$variable == "mpg")
table(carMelt$cyl %in% c("4") & carMelt$variable == "mpg")
cylData <- dcast(carMelt, cyl ~ variable, mean)
head(cylData)
head(InsectSprays)
tapply(InsectSprays$count,InsectSprays$spray,sum)
tapply(InsectSprays$count,InsectSprays$spray,mean)
head(InsectSprays)
spIns =  split(InsectSprays$count,InsectSprays$spray)
spIns
sprCount = lapply(spIns,sum)
sprCount
unlist(sprCount)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
library(plyr)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
load("F:/OneDrive/Documents/R/horizontal.RData")
setwd("~/R/Coursera/3. Getting and Cleaning Data/GetCleanDataProject")
library(data.table)
library(plyr)
library(dplyr)
library(tidyr)
library(Hmisc)
Load data ---------------------------------------------------------------
# Test data
testdata <- fread("data/test/X_test.txt")
testactivities <- fread("data/test/y_test.txt", nrows = 2947)
testsubjects <- fread("data/test/subject_test.txt", nrows = 2947)
# Training data
traindata <- fread("data/train/X_train.txt", nrows = 7352)
trainactivities <- fread("data/train/y_train.txt", nrows = 7352)
trainsubjects <- fread("data/train/subject_train.txt", nrows = 7352)
# Reference data
activitylabels <- fread("data/activity_labels.txt")
columnlabels <- fread("data/features.txt", nrows = 561)
# Merge data --------------------------------------------------------------
# Merge data sets
l = list(testdata, traindata)
alldata <- rbindlist(l, use.names = TRUE, fill = FALSE)
rm(l)
# Add column names
colnames(alldata) <- columnlabels$V2
colnames(activitylabels) <- c("activitycode", "activity")
# Add activity codes to data
l = list(testactivities, trainactivities)
activitycodes <- rbindlist(l, use.names = TRUE, fill = FALSE)
rm(l)
# Merge subjectdata
l = list(testsubjects, trainsubjects)
subjects <- rbindlist(l, use.names = TRUE, fill = FALSE)
rm(l)
# Bin unused objects to free up memory
rm(testdata,
traindata,
testactivities,
trainactivities,
testsubjects,
trainsubjects
)
# Subset data -------------------------------------------------------------
# Determine which columns I need
subsetnames <- columnlabels[grepl("mean|std", columnlabels$V2),]
subsetnames <- subsetnames[!grepl("Freq", subsetnames$V2),]
# Subset for means and std
subdata <- select(alldata, subsetnames$V1)
# Bring in subjects and activity codes
subdata$subject <- subjects$V1
subdata$activitycode <- activitycodes$V1
# Bin unused objects to free up memory
rm(activitycodes,
subjects,
alldata,
subsetnames,
columnlabels
)
# Bring in activity names
fulldata <-
merge(subdata,
activitylabels,
by = "activitycode",
sort = FALSE)
rm(subdata,
activitylabels
)
View(fulldata)
fulldata <- tbl(fulldata)
groupdata <- group_by(fulldata, subject)
View(groupdata)
groupdata <- group_by(fulldata, subject, activity)
View(groupdata)
colMeans(groupdata, na.rm = FALSE, dims = 1)
View(groupdata)
summarize(groupdata, [2])
summarize(groupdata, 2)
summarize(groupdata, result = mean(na.rm = TRUE)
)
View(groupdata)
names(groupdata)
summarize(groupdata, result = mean("tBodyAcc-mean()-X", na.rm = TRUE))
summarize(groupdata)
summarize(groupdata, by = ALL)
summarize_each(groupdata)
summarize_each(groupdata, mean())
groupdata %>% summarise_each(funs(mean))
summarydata <- groupdata %>% summarise_each(funs(mean))
View(summarydata)
View(fulldata)
fulldata <- fulldata[!activitycode]
fulldata <- fulldata[!"activitycode"]
fulldata <- fulldata[!fulldata$activitycode]
View(fulldata)
fulldata <- select(fulldata, -activitycode)
View(fulldata)
groupdata <- group_by(fulldata, subject, activity)
summarydata <- groupdata %>% summarise_each(funs(mean))
View(summarydata)
arrange(groupdata, subject, activity code)
arrange(fulldata, subject, activity code)
arrange(fulldata, subject, activitycode)
arrange(fulldata, subject, activity)
View(fulldata)
fulldata <- arrange(fulldata, subject, activity)
View(fulldata)
summarydata <- summarise_each(groupdata, funs(mean))
View(summarydata)
groupdata <- group_by(fulldata, subject, activity)
summarydata <- summarise_each(groupdata, funs(mean))
View(summarydata)
write.table(summarydata, file = run_analysis.txt, row.name=FALSE)
write.table(summarydata, file = "run_analysis.txt", sep = " ", row.name=FALSE)
write.table(summarydata, file = "run_analysis.txt", row.name=FALSE)
source('~/R/Coursera/3. Getting and Cleaning Data/GetCleanDataProject/run_analysis.R', echo=TRUE)
source('~/R/Coursera/3. Getting and Cleaning Data/GetCleanDataProject/run_analysis.R', echo=TRUE)
source('~/R/Coursera/3. Getting and Cleaning Data/GetCleanDataProject/run_analysis.R', echo=TRUE)
View(summarydata)
